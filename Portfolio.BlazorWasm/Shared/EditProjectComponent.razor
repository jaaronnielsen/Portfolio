@inject Portfolio.BlazorWasm.ProjectApiService projectApi
@inject AuthenticationStateProvider authStateProvider
@using Portfolio.shared

<h3>@project.Title</h3>

<div class="form-group">
    <textarea @bind="newProjectName" placeholder="Title" class="form-control" rows="3" />
</div>
<div class="form-group">
    <textarea @bind="newRequirements" placeholder="Requirments" class="form-control" rows="3" />
</div>
<div class="form-group">
    <textarea @bind="newDesign" placeholder="Design" class="form-control" rows="3" />
</div>
<div>
    <textarea @bind="newCompletedDate" placeholder="Date Completed" class="form-control" rows="3" />
</div>
@if (isAdmin)
{
    <div>
        <button class="btn-success" @onclick="Edit">Edit Project</button>
        <button class="btn-danger" @onclick="(() => Delete(project))">Delete</button>
    </div>
}


@code {
    [Parameter]
    public string Slug { get; set; }
    bool isAdmin;
    private string newProjectName;
    private string newRequirements;
    private string newDesign;
    private DateTime newCompletedDate;
    private Project project = new Project();

    public void Edit()
    {
        project.Title = newProjectName ?? project.Title;
        project.Requirements = newRequirements ?? project.Requirements;
        project.Design = newDesign ?? project.Design;
        project.CompletedDate = newCompletedDate;
        projectApi.EditProject(project);
    }

    protected override async Task OnInitializedAsync()
    {
        project = await projectApi.GetProjectBySlugAsync(Slug);
        newProjectName = project.Title;
        newRequirements = project.Requirements;
        newDesign = project.Design;
        newCompletedDate = project.CompletedDate;

        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var roles = from c in authState.User.Claims
                    where c.Type == "https://schemas.dev-ztkpmk50.com/roles"
                    select c.Value;
        isAdmin = roles.Any(r => r.Contains("Admin"));
    }

    private void Delete(Project project)
    {
        projectApi.DeleteProject(project);
    }
}
