@page "/editproject/{Id:int}"
@inject Portfolio.BlazorWasm.ProjectApiService projectApi
@using Portfolio.shared

<h3>EditProject</h3>

<input @bind-value="newProjectName">
<input @bind-value="newRequirements">
<input @bind-value="newDesign">
<input @bind-value="newCompletedDate">
<button @onclick="Edit">Edit Project</button>

<input @bind-value="newLanguageName" />
<button @onclick="(() => assign(language))">Add Language</button>
<input @bind-value="newTechnologyName" />
<button @onclick="(() => assign(technology))">Add Technology</button>
<input @bind-value="newPlatformName" />
<button @onclick="(() => assign(platform))">Add Platform</button>

<div>
    <label>Title</label>
    <p>@project.Title</p>
    <label>Requirments</label>
    <p>@project.Requirements</p>
    <label>Design</label>
    <p>@project.Design</p>
    <label>Date Completed</label>
    <p>@project.CompletedDate</p>
    <div>
        <h5>Platforms</h5>
        <p>
            @foreach (var l in Languages)
            {
                <ul>
                    <li><a href="language/@l.Id/@l.Name">@l.Name</a></li>
                </ul>
            }
        </p>
    </div>
    <div>
        <h5>Technologies</h5>
        <p>
            @foreach (var t in Technologies)
            {
                <ul>
                    <li><a href="technology/@t.Id/@t.Name">@t.Name</a></li>
                </ul>
            }
        </p>
    </div>
    <div>
        <h5>Platforms</h5>
        <p>
            @foreach (var p in Platforms)
            {
                <ul>
                    <li><a href="platform/@p.Id/@p.Name">@p.Name</a></li>
                </ul>
            }
        </p>
    </div>
</div>



@code {
        [Parameter]
        public int Id { get; set; }
    private string newProjectName;
    private string newRequirements;
    private string newDesign;
    private string newLanguageName;
    private string newTechnologyName;
    private string newPlatformName;
    private DateTime newCompletedDate;
    private Project project = new Project();
    private IEnumerable<Language> Languages = new List<Language>();
    private IEnumerable<Technology> Technologies = new List<Technology>();
    private IEnumerable<Portfolio.shared.Platform> Platforms = new List<Portfolio.shared.Platform>();

    private const string language = "language";
    private const string technology = "technology";
    private const string platform = "platform";

    public void Edit()
    {
        project.Title = newProjectName ?? project.Title;
        project.Requirements = newRequirements ?? project.Requirements;
        project.Design = newDesign ?? project.Design;
        project.CompletedDate = newCompletedDate;
        projectApi.EditProject(project);
    }

    protected override async Task OnInitializedAsync()
    {
        project = await projectApi.GetProjectByIDAsync(Id);
        newProjectName = project.Title;
        newRequirements = project.Requirements;
        newDesign = project.Design;
        newCompletedDate = project.CompletedDate;

        Languages = await projectApi.GetLanguagesByProjectId(Id);
        Technologies = await projectApi.GetTechnologyByProjectId(Id);
        Platforms = await projectApi.GetPlatformsByProjectId(Id);
    }

    async Task refreshAsync() => project = await projectApi.GetProjectByIDAsync(Id);

    private async Task assign(string category)
    {
        if (category == language)
        {
            await projectApi.AssignAsync(Portfolio.shared.Project.LanguageCategory, project.Id, newLanguageName);
            await refreshAsync();
        }
        else if (category == technology)
        {
            await projectApi.AssignAsync(Portfolio.shared.Project.TechnologyCategory, project.Id, newTechnologyName);
            await refreshAsync();
        }
        else
        {
            await projectApi.AssignAsync(Portfolio.shared.Project.PlatformCategory, project.Id, newPlatformName);
            await refreshAsync();
        }
    }
}
